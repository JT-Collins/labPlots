# set theme for ggplots to be used by lab
# use source("C:/Users/jtcoll06/Box/Lab Docs/R projects/lab_plots.R") at beginning of script
#library(ggtext)
packages <-
  c("showtext", "ggplot2", "scales")
    
## load or install&load all packages
package.check <- lapply(
  packages,
  FUN = function(x)
  {
    if (!require(x, character.only = TRUE))
    {
      install.packages(x, dependencies = TRUE,
                       repos = "http://cran.us.r-project.org")
      library(x, character.only = TRUE)
    }
  }
)


# font_add_google("Roboto", "roboto")
# font_add("Gotham", "gb")
# font_add_google("Roboto Condensed", "rc")

# 
# font_add(family = "roboto", 
#          regular = "~/Box/Lab Docs/R projects/aesthetics/fonts/Roboto-Regular.ttf",
#          italic = "~/Box/Lab Docs/R projects/aesthetics/fonts/Roboto-Italic.ttf",
#          bold = "~/Box/Lab Docs/R projects/aesthetics/fonts/Roboto-Bold.ttf")
# 
# font_add(family = "rc", 
#          regular = "~/Box/Lab Docs/R projects/aesthetics/fonts/RobotoCondensed-Regular.ttf",
#          italic = "~/Box/Lab Docs/R projects/aesthetics/fonts/RobotoCondensed-Italic.ttf",
#          bold = "~/Box/Lab Docs/R projects/aesthetics/fonts/RobotoCondensed-Bold.ttf")

font_add(family = "assistant", 
         regular = "~/Box/Lab Docs/R projects/aesthetics/fonts/Assistant-Regular.otf",
         italic = "~/Box/Lab Docs/R projects/aesthetics/fonts/SourceSansPro-Italic.ttf",
         bold = "~/Box/Lab Docs/R projects/aesthetics/fonts/Assistant-SemiBold.otf")

showtext_opts(dpi = 96)
showtext_auto(enable = TRUE)

theme_set(theme_classic())
ggplot2::theme_update(
  line = element_line(size = .523),
  rect = element_rect(size = .523),
  text = element_text(family = "assistant", size = 12, color = "#2b2b2b", lineheight=0.8),
  plot.title = element_text(family = "assistant", size = 20,
                            face = "bold", margin = margin(0,0,7.5,0, unit = "points")),
  plot.subtitle = element_text(family = "assistant", size = 12,
                               face = "plain", color="#1b2838",
                               margin = margin(0,0,15,0, unit = "points")),
  plot.caption = element_text(family = "assistant", size = 12, hjust = 1, 
                              vjust = 1,margin = margin(5,0,5,0, unit = "points")),
  plot.margin = margin(30,30,30,30, "pt"),
  axis.title.y = element_text(family = "assistant", size = 12, hjust = 1, angle=90, margin = margin(0,5,10,0, unit = "pt")),
  axis.title.y.right = element_text(family = "assistant", size = 14, hjust = 1, angle=90, margin = margin(0,0,0,3, unit = "pt")),
  axis.title.x = element_text(family = "assistant", size = 12,hjust = 1,margin = margin(5,0,0,0, unit = "pt")),
  axis.title.x.top = element_text(family = "assistant", margin = margin(0,0,3,0, unit = "pt")),
  axis.text = element_text(size = 12, color = "grey30"),
  axis.text.x = element_text(margin = margin(0,0,0,0, unit = "pt")),
  axis.text.x.top = element_text(margin = margin(0,0,2.3,0, unit = "pt")),
  axis.text.y = element_text(margin = margin(0,0,0,0, unit = "pt")),
  axis.text.y.right = element_text(margin = margin(0,0,0,2.3, unit = "pt")),
  axis.ticks = element_blank(),
  axis.line=element_line(size=0.8, color = "grey30"),
  legend.background = element_blank(),
  legend.margin = margin(5.75,5.75,5.75,5.75, unit = "pt"),
  legend.spacing = unit(11.5, "pt"),
  legend.key = element_blank(),
  legend.box.spacing = unit(11.5, "pt"),
  panel.background = element_blank(),
  panel.spacing = unit(1.5, "lines"),
  # panel.grid = element_line(color = "#cccccc",
  #                           size=0.15),
  # panel.grid.major = element_line(color = "#cccccc",
  #                                 size=0.15),
  # panel.grid.minor = element_line(color = "#cccccc",
  #                                 size=0.1),
  axis.title = element_text(size=12),
  strip.background = element_blank(),
  strip.text = element_text(size = 12, hjust = 0, colour = "grey10", face = "plain",
                            margin = margin(4.6,4.6,4.6,4.6, unit = "pt")),
  # axis.line = element_blank(),
  plot.background = element_blank(),
  plot.title.position = "plot"
) 

# ggplot2::theme_update(
#   line = element_line(size = .523),
#   rect = element_rect(size = .523),
#   text = element_text(family = "rc", size = 11.5, color = "#2b2b2b"),
#   plot.title = element_text(family = "rc", size = 17,
#                             face = "bold", margin = margin(0,0,7.5,0, unit = "pt")),
#   plot.subtitle = element_text(family = "rc", size = 13,
#                                face = "plain", color="#1b2838",
#                                margin = margin(0,0,15,0, unit = "points")),
#   plot.caption = element_text(family = "rc", size = 9, hjust = 1, 
#                               vjust = 1,margin = margin(5,0,5,0, unit = "points")),
#   plot.margin = margin(30,30,30,30, "pt"),
#   axis.title.y = element_text(family = "roboto", size = 9, hjust = 1, angle=90, margin = margin(0,5,10,0, unit = "pt")),
#   axis.title.y.right = element_text(family = "roboto", size = 9, hjust = 1, angle=90, margin = margin(0,0,0,3, unit = "pt")),
#   axis.title.x = element_text(family = "roboto", size = 9,hjust = 1,margin = margin(5,0,0,0, unit = "pt")),
#   axis.title.x.top = element_text(family = "roboto", margin = margin(0,0,3,0, unit = "pt")),
#   axis.text = element_text(size = 11.5, color = "grey30"),
#   axis.text.x = element_text(margin = margin(0,0,0,0, unit = "pt")),
#   axis.text.x.top = element_text(margin = margin(0,0,2.3,0, unit = "pt")),
#   axis.text.y = element_text(margin = margin(0,0,0,0, unit = "pt")),
#   axis.text.y.right = element_text(margin = margin(0,0,0,2.3, unit = "pt")),
#   axis.ticks = element_blank(),
#   legend.background = element_blank(),
#   legend.margin = margin(5.75,5.75,5.75,5.75, unit = "pt"),
#   legend.spacing = unit(11.5, "pt"),
#   legend.key = element_blank(),
#   legend.box.spacing = unit(11.5, "pt"),
#   panel.background = element_blank(),
#   panel.spacing = unit(2, "lines"),
#   panel.grid = element_line(color = "#cccccc",
#                             size=0.15),
#   panel.grid.major = element_line(color = "#cccccc",
#                                   size=0.15),
#   panel.grid.minor = element_line(color = "#cccccc",
#                                   size=0.1),
#   axis.title = element_text(size=12),
#   strip.background = element_blank(),
#   strip.text = element_text(size = 12, hjust = 0, colour = "grey10", face = "plain",
#                             margin = margin(4.6,4.6,4.6,4.6, unit = "pt")),
#   axis.line = element_blank(),
#   plot.background = element_blank(),
#   plot.title.position = "plot"
# ) 
  
grant <- theme(axis.text.y = element_text(size = 6),
            axis.text.x = element_text(size = 6),
            axis.title.x = element_text(size = 7),
            axis.title.y = element_text(size = 7),
            legend.text = element_text(size = 6),
            legend.title = element_text(size = 6),
            plot.title = element_text(size = 9),
            plot.subtitle = element_text(size = 7),
            plot.caption = element_text(size = 7),
            strip.text = element_text(size = 8))



pp <- theme(axis.text.y = element_text(size = 16),
            axis.text.x = element_text(size = 16),
            axis.title.x = element_text(size = 18),
            axis.title.y = element_text(size = 18),
            legend.text = element_text(size = 16),
            legend.title = element_text(size = 18),
            plot.title = element_text(size = 20),
            plot.subtitle = element_text(size = 18))   

pp_transparent <- theme(axis.text.y = element_text(size = 16),
            axis.text.x = element_text(size = 16),
            axis.title.x = element_text(size = 18),
            axis.title.y = element_text(size = 18),
            legend.text = element_text(size = 16),
            legend.title = element_text(size = 18),
            plot.title = element_text(size = 20),
            plot.subtitle = element_text(size = 18),
            panel.background = element_rect(fill = "transparent", color = NA), # bg of the panel
            plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
            legend.background = element_rect(fill = "transparent", color = NA), # get rid of legend bg
            legend.box.background = element_rect(fill = "transparent", color = NA)
            ) 

norm_transparent <- theme(panel.background = element_rect(fill = "transparent", color = NA), # bg of the panel
                          plot.background = element_rect(fill = "transparent", color = NA), # bg of the plot
                          legend.background = element_rect(fill = "transparent", color = NA), # get rid of legend bg
                          legend.box.background = element_rect(fill = "transparent", color = NA)
) 

opts <- options()  # save old options

options(ggplot2.continuous.colour="viridis")
options(ggplot2.continuous.fill = "viridis")
scale_colour_discrete <- scale_colour_viridis_d
scale_fill_discrete <- scale_fill_viridis_d

# viridis_qualitative_pal7 <- c("#440154FF", "#FDE725FF", "#443A83FF", 
#                               "#8FD744FF", "#31688EFF",  "#35B779FF", 
#                               "#21908CFF")
# 
# scale_fill_discrete <- function(...) {
#   scale_fill_manual(..., values = viridis_qualitative_pal7)
# }
pub_col <- c("#386cb0","#fdb462","#7fc97f","#ef3b2c","#662506","#a6cee3","#fb9a99","#984ea3","#ffff33")

scale_fill_Publication <- function(...){
  
  scales::discrete_scale("fill","Publication",manual_pal(values = pub_col), ...)
  
}

scale_colour_Publication <- function(...){
  
  scales::discrete_scale("colour","Publication",manual_pal(values = pub_col), ...)
  
}

uofl_col <- c("#8B9DA1", "#AD0000", "#004E74", "#FEBE10" ,"#00A89D","#7A6C53",  "#AAB43A", "#D9C982")

scale_fill_uofl <- function(...){
  
  scales::discrete_scale("fill","Publication",manual_pal(values = uofl_col), ...)
  
}

scale_colour_uofl <- function(...){
  
  scales::discrete_scale("colour","Publication",manual_pal(values = uofl_col), ...)
  
}


wisteria <-
  c("grey65", "burlywood3", "khaki2", "plum1", "lightcyan2", "cornflowerblue", "slateblue3")  

scale_colour_wist <- function(...){
  library(scales)
  discrete_scale("colour","Publication",manual_pal(values = wisteria), ...)
  
}


print("Prior to saving set showtext_opts(dpi = 300)", quote = FALSE)
print("Use library(ggtext) to add simple markdown to plot titles etc useing element_markdown() and element_textbox_simple(). See: https://github.com/wilkelab/ggtext", quote = F)
print("to use the UofL colour pal in ggplot use scale_colour_manual(values = uofl_col) or scale_fill_manual(values = uofl_col)", quote = FALSE)
print("when saving with ggsave be sure to add  type='cairo' ", quote = FALSE)
print("add '+ pp' to plots to increase font size for powerpoint plots or '+ pp_transparent' for transparent background", quote = FALSE)
print("be sure to use  bg = 'transparent' in GGsave", quote = FALSE)
